//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace Airport.SqlReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Check_in", Namespace="http://schemas.datacontract.org/2004/07/SqlService")]
    public partial class Check_in : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<Airport.SqlReference.BoardingPass> BoardingPassField;
        
        private string FirstNameField;
        
        private string LastNameField;
        
        private string LoginField;
        
        private string ManagerIDField;
        
        private string PasswordHashField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Airport.SqlReference.BoardingPass> BoardingPass {
            get {
                return this.BoardingPassField;
            }
            set {
                if ((object.ReferenceEquals(this.BoardingPassField, value) != true)) {
                    this.BoardingPassField = value;
                    this.RaisePropertyChanged("BoardingPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ManagerID {
            get {
                return this.ManagerIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ManagerIDField, value) != true)) {
                    this.ManagerIDField = value;
                    this.RaisePropertyChanged("ManagerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PasswordHash {
            get {
                return this.PasswordHashField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordHashField, value) != true)) {
                    this.PasswordHashField = value;
                    this.RaisePropertyChanged("PasswordHash");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BoardingPass", Namespace="http://schemas.datacontract.org/2004/07/SqlService")]
    public partial class BoardingPass : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string BoardingPassIDField;
        
        private string CheckInManagerIDField;
        
        private Airport.SqlReference.Check_in Check_inField;
        
        private Airport.SqlReference.Flight FlightField;
        
        private string FlightIDField;
        
        private System.Nullable<System.DateTime> FlightTimeField;
        
        private System.Collections.ObjectModel.ObservableCollection<Airport.SqlReference.Luggage> LuggageField;
        
        private Airport.SqlReference.Passenger PassengerField;
        
        private string PassengerIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BoardingPassID {
            get {
                return this.BoardingPassIDField;
            }
            set {
                if ((object.ReferenceEquals(this.BoardingPassIDField, value) != true)) {
                    this.BoardingPassIDField = value;
                    this.RaisePropertyChanged("BoardingPassID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CheckInManagerID {
            get {
                return this.CheckInManagerIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CheckInManagerIDField, value) != true)) {
                    this.CheckInManagerIDField = value;
                    this.RaisePropertyChanged("CheckInManagerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Airport.SqlReference.Check_in Check_in {
            get {
                return this.Check_inField;
            }
            set {
                if ((object.ReferenceEquals(this.Check_inField, value) != true)) {
                    this.Check_inField = value;
                    this.RaisePropertyChanged("Check_in");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Airport.SqlReference.Flight Flight {
            get {
                return this.FlightField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightField, value) != true)) {
                    this.FlightField = value;
                    this.RaisePropertyChanged("Flight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FlightID {
            get {
                return this.FlightIDField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightIDField, value) != true)) {
                    this.FlightIDField = value;
                    this.RaisePropertyChanged("FlightID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> FlightTime {
            get {
                return this.FlightTimeField;
            }
            set {
                if ((this.FlightTimeField.Equals(value) != true)) {
                    this.FlightTimeField = value;
                    this.RaisePropertyChanged("FlightTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Airport.SqlReference.Luggage> Luggage {
            get {
                return this.LuggageField;
            }
            set {
                if ((object.ReferenceEquals(this.LuggageField, value) != true)) {
                    this.LuggageField = value;
                    this.RaisePropertyChanged("Luggage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Airport.SqlReference.Passenger Passenger {
            get {
                return this.PassengerField;
            }
            set {
                if ((object.ReferenceEquals(this.PassengerField, value) != true)) {
                    this.PassengerField = value;
                    this.RaisePropertyChanged("Passenger");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PassengerID {
            get {
                return this.PassengerIDField;
            }
            set {
                if ((object.ReferenceEquals(this.PassengerIDField, value) != true)) {
                    this.PassengerIDField = value;
                    this.RaisePropertyChanged("PassengerID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Flight", Namespace="http://schemas.datacontract.org/2004/07/SqlService")]
    public partial class Flight : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Airport.SqlReference.Aircraft AircraftField;
        
        private string AircraftIDField;
        
        private Airport.SqlReference.AircraftRoute AircraftRouteField;
        
        private System.Collections.ObjectModel.ObservableCollection<Airport.SqlReference.BoardingPass> BoardingPassField;
        
        private string FlightIDField;
        
        private string RouteIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Airport.SqlReference.Aircraft Aircraft {
            get {
                return this.AircraftField;
            }
            set {
                if ((object.ReferenceEquals(this.AircraftField, value) != true)) {
                    this.AircraftField = value;
                    this.RaisePropertyChanged("Aircraft");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AircraftID {
            get {
                return this.AircraftIDField;
            }
            set {
                if ((object.ReferenceEquals(this.AircraftIDField, value) != true)) {
                    this.AircraftIDField = value;
                    this.RaisePropertyChanged("AircraftID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Airport.SqlReference.AircraftRoute AircraftRoute {
            get {
                return this.AircraftRouteField;
            }
            set {
                if ((object.ReferenceEquals(this.AircraftRouteField, value) != true)) {
                    this.AircraftRouteField = value;
                    this.RaisePropertyChanged("AircraftRoute");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Airport.SqlReference.BoardingPass> BoardingPass {
            get {
                return this.BoardingPassField;
            }
            set {
                if ((object.ReferenceEquals(this.BoardingPassField, value) != true)) {
                    this.BoardingPassField = value;
                    this.RaisePropertyChanged("BoardingPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FlightID {
            get {
                return this.FlightIDField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightIDField, value) != true)) {
                    this.FlightIDField = value;
                    this.RaisePropertyChanged("FlightID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RouteID {
            get {
                return this.RouteIDField;
            }
            set {
                if ((object.ReferenceEquals(this.RouteIDField, value) != true)) {
                    this.RouteIDField = value;
                    this.RaisePropertyChanged("RouteID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Passenger", Namespace="http://schemas.datacontract.org/2004/07/SqlService")]
    public partial class Passenger : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<System.DateTime> BirthDateField;
        
        private System.Collections.ObjectModel.ObservableCollection<Airport.SqlReference.BoardingPass> BoardingPassField;
        
        private string FirstNameField;
        
        private System.Nullable<bool> GenderField;
        
        private string LastNameField;
        
        private string PassengerIDField;
        
        private System.Nullable<long> PassportNumField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> BirthDate {
            get {
                return this.BirthDateField;
            }
            set {
                if ((this.BirthDateField.Equals(value) != true)) {
                    this.BirthDateField = value;
                    this.RaisePropertyChanged("BirthDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Airport.SqlReference.BoardingPass> BoardingPass {
            get {
                return this.BoardingPassField;
            }
            set {
                if ((object.ReferenceEquals(this.BoardingPassField, value) != true)) {
                    this.BoardingPassField = value;
                    this.RaisePropertyChanged("BoardingPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> Gender {
            get {
                return this.GenderField;
            }
            set {
                if ((this.GenderField.Equals(value) != true)) {
                    this.GenderField = value;
                    this.RaisePropertyChanged("Gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PassengerID {
            get {
                return this.PassengerIDField;
            }
            set {
                if ((object.ReferenceEquals(this.PassengerIDField, value) != true)) {
                    this.PassengerIDField = value;
                    this.RaisePropertyChanged("PassengerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> PassportNum {
            get {
                return this.PassportNumField;
            }
            set {
                if ((this.PassportNumField.Equals(value) != true)) {
                    this.PassportNumField = value;
                    this.RaisePropertyChanged("PassportNum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Luggage", Namespace="http://schemas.datacontract.org/2004/07/SqlService")]
    public partial class Luggage : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Airport.SqlReference.BoardingPass BoardingPassField;
        
        private string BoardingPassIDField;
        
        private string LuggageIDField;
        
        private System.Nullable<float> WeightField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Airport.SqlReference.BoardingPass BoardingPass {
            get {
                return this.BoardingPassField;
            }
            set {
                if ((object.ReferenceEquals(this.BoardingPassField, value) != true)) {
                    this.BoardingPassField = value;
                    this.RaisePropertyChanged("BoardingPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BoardingPassID {
            get {
                return this.BoardingPassIDField;
            }
            set {
                if ((object.ReferenceEquals(this.BoardingPassIDField, value) != true)) {
                    this.BoardingPassIDField = value;
                    this.RaisePropertyChanged("BoardingPassID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LuggageID {
            get {
                return this.LuggageIDField;
            }
            set {
                if ((object.ReferenceEquals(this.LuggageIDField, value) != true)) {
                    this.LuggageIDField = value;
                    this.RaisePropertyChanged("LuggageID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<float> Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Aircraft", Namespace="http://schemas.datacontract.org/2004/07/SqlService")]
    public partial class Aircraft : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AircraftIDField;
        
        private string AircraftNameField;
        
        private System.Collections.ObjectModel.ObservableCollection<Airport.SqlReference.Flight> FlightField;
        
        private System.Nullable<int> SeatsNumField;
        
        private System.Nullable<System.DateTime> YearBuiltField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AircraftID {
            get {
                return this.AircraftIDField;
            }
            set {
                if ((object.ReferenceEquals(this.AircraftIDField, value) != true)) {
                    this.AircraftIDField = value;
                    this.RaisePropertyChanged("AircraftID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AircraftName {
            get {
                return this.AircraftNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AircraftNameField, value) != true)) {
                    this.AircraftNameField = value;
                    this.RaisePropertyChanged("AircraftName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Airport.SqlReference.Flight> Flight {
            get {
                return this.FlightField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightField, value) != true)) {
                    this.FlightField = value;
                    this.RaisePropertyChanged("Flight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SeatsNum {
            get {
                return this.SeatsNumField;
            }
            set {
                if ((this.SeatsNumField.Equals(value) != true)) {
                    this.SeatsNumField = value;
                    this.RaisePropertyChanged("SeatsNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> YearBuilt {
            get {
                return this.YearBuiltField;
            }
            set {
                if ((this.YearBuiltField.Equals(value) != true)) {
                    this.YearBuiltField = value;
                    this.RaisePropertyChanged("YearBuilt");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AircraftRoute", Namespace="http://schemas.datacontract.org/2004/07/SqlService")]
    public partial class AircraftRoute : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ArrivalPointIDField;
        
        private Airport.SqlReference.City CityField;
        
        private Airport.SqlReference.City City1Field;
        
        private string DeparturePointIDField;
        
        private System.Collections.ObjectModel.ObservableCollection<Airport.SqlReference.Flight> FlightField;
        
        private string RouteIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArrivalPointID {
            get {
                return this.ArrivalPointIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ArrivalPointIDField, value) != true)) {
                    this.ArrivalPointIDField = value;
                    this.RaisePropertyChanged("ArrivalPointID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Airport.SqlReference.City City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Airport.SqlReference.City City1 {
            get {
                return this.City1Field;
            }
            set {
                if ((object.ReferenceEquals(this.City1Field, value) != true)) {
                    this.City1Field = value;
                    this.RaisePropertyChanged("City1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeparturePointID {
            get {
                return this.DeparturePointIDField;
            }
            set {
                if ((object.ReferenceEquals(this.DeparturePointIDField, value) != true)) {
                    this.DeparturePointIDField = value;
                    this.RaisePropertyChanged("DeparturePointID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Airport.SqlReference.Flight> Flight {
            get {
                return this.FlightField;
            }
            set {
                if ((object.ReferenceEquals(this.FlightField, value) != true)) {
                    this.FlightField = value;
                    this.RaisePropertyChanged("Flight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RouteID {
            get {
                return this.RouteIDField;
            }
            set {
                if ((object.ReferenceEquals(this.RouteIDField, value) != true)) {
                    this.RouteIDField = value;
                    this.RaisePropertyChanged("RouteID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="City", Namespace="http://schemas.datacontract.org/2004/07/SqlService")]
    public partial class City : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<Airport.SqlReference.AircraftRoute> AircraftRouteField;
        
        private System.Collections.ObjectModel.ObservableCollection<Airport.SqlReference.AircraftRoute> AircraftRoute1Field;
        
        private string CityIDField;
        
        private string CityNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Airport.SqlReference.AircraftRoute> AircraftRoute {
            get {
                return this.AircraftRouteField;
            }
            set {
                if ((object.ReferenceEquals(this.AircraftRouteField, value) != true)) {
                    this.AircraftRouteField = value;
                    this.RaisePropertyChanged("AircraftRoute");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Airport.SqlReference.AircraftRoute> AircraftRoute1 {
            get {
                return this.AircraftRoute1Field;
            }
            set {
                if ((object.ReferenceEquals(this.AircraftRoute1Field, value) != true)) {
                    this.AircraftRoute1Field = value;
                    this.RaisePropertyChanged("AircraftRoute1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CityID {
            get {
                return this.CityIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CityIDField, value) != true)) {
                    this.CityIDField = value;
                    this.RaisePropertyChanged("CityID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CityName {
            get {
                return this.CityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CityNameField, value) != true)) {
                    this.CityNameField = value;
                    this.RaisePropertyChanged("CityName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccountInformation", Namespace="http://schemas.datacontract.org/2004/07/SqlService")]
    public partial class AccountInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string FirstNameField;
        
        private string IdField;
        
        private string LastNameField;
        
        private string LoginField;
        
        private string PasswordHashField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PasswordHash {
            get {
                return this.PasswordHashField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordHashField, value) != true)) {
                    this.PasswordHashField = value;
                    this.RaisePropertyChanged("PasswordHash");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SqlReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SignUp", ReplyAction="http://tempuri.org/IService/SignUpResponse")]
        System.Threading.Tasks.Task<bool> SignUpAsync(Airport.SqlReference.Check_in manager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Login", ReplyAction="http://tempuri.org/IService/LoginResponse")]
        System.Threading.Tasks.Task<Airport.SqlReference.AccountInformation> LoginAsync(string login, string passwordHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddCity", ReplyAction="http://tempuri.org/IService/AddCityResponse")]
        System.Threading.Tasks.Task<bool> AddCityAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddRoute", ReplyAction="http://tempuri.org/IService/AddRouteResponse")]
        System.Threading.Tasks.Task<bool> AddRouteAsync(string departure, string arrival);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCitiesDictionary", ReplyAction="http://tempuri.org/IService/GetCitiesDictionaryResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetCitiesDictionaryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddAircraft", ReplyAction="http://tempuri.org/IService/AddAircraftResponse")]
        System.Threading.Tasks.Task<bool> AddAircraftAsync(string name, System.DateTime builtDate, int seatsNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAircraftDictionary", ReplyAction="http://tempuri.org/IService/GetAircraftDictionaryResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetAircraftDictionaryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetRouteDictionary", ReplyAction="http://tempuri.org/IService/GetRouteDictionaryResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetRouteDictionaryAsync(string departure, string arrival);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddFlight", ReplyAction="http://tempuri.org/IService/AddFlightResponse")]
        System.Threading.Tasks.Task<bool> AddFlightAsync(string routeId, string aircraftId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddPassenger", ReplyAction="http://tempuri.org/IService/AddPassengerResponse")]
        System.Threading.Tasks.Task<bool> AddPassengerAsync(string firstName, string lastName, long passportNum, bool gender, System.DateTime birthDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemovePassenger", ReplyAction="http://tempuri.org/IService/RemovePassengerResponse")]
        System.Threading.Tasks.Task<bool> RemovePassengerAsync(string passengerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPassengerDictionary", ReplyAction="http://tempuri.org/IService/GetPassengerDictionaryResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetPassengerDictionaryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddBoardingPass", ReplyAction="http://tempuri.org/IService/AddBoardingPassResponse")]
        System.Threading.Tasks.Task<string> AddBoardingPassAsync(string flightId, string passengerId, string managerId, System.DateTime flightDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddLuggage", ReplyAction="http://tempuri.org/IService/AddLuggageResponse")]
        System.Threading.Tasks.Task<string> AddLuggageAsync(string passengerId, float weight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFlightDictionary", ReplyAction="http://tempuri.org/IService/GetFlightDictionaryResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetFlightDictionaryAsync(string departure, string arrival);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Airport.SqlReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Airport.SqlReference.IService>, Airport.SqlReference.IService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceClient() : 
                base(ServiceClient.GetDefaultBinding(), ServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), ServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<bool> SignUpAsync(Airport.SqlReference.Check_in manager) {
            return base.Channel.SignUpAsync(manager);
        }
        
        public System.Threading.Tasks.Task<Airport.SqlReference.AccountInformation> LoginAsync(string login, string passwordHash) {
            return base.Channel.LoginAsync(login, passwordHash);
        }
        
        public System.Threading.Tasks.Task<bool> AddCityAsync(string name) {
            return base.Channel.AddCityAsync(name);
        }
        
        public System.Threading.Tasks.Task<bool> AddRouteAsync(string departure, string arrival) {
            return base.Channel.AddRouteAsync(departure, arrival);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetCitiesDictionaryAsync() {
            return base.Channel.GetCitiesDictionaryAsync();
        }
        
        public System.Threading.Tasks.Task<bool> AddAircraftAsync(string name, System.DateTime builtDate, int seatsNum) {
            return base.Channel.AddAircraftAsync(name, builtDate, seatsNum);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetAircraftDictionaryAsync() {
            return base.Channel.GetAircraftDictionaryAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetRouteDictionaryAsync(string departure, string arrival) {
            return base.Channel.GetRouteDictionaryAsync(departure, arrival);
        }
        
        public System.Threading.Tasks.Task<bool> AddFlightAsync(string routeId, string aircraftId) {
            return base.Channel.AddFlightAsync(routeId, aircraftId);
        }
        
        public System.Threading.Tasks.Task<bool> AddPassengerAsync(string firstName, string lastName, long passportNum, bool gender, System.DateTime birthDate) {
            return base.Channel.AddPassengerAsync(firstName, lastName, passportNum, gender, birthDate);
        }
        
        public System.Threading.Tasks.Task<bool> RemovePassengerAsync(string passengerId) {
            return base.Channel.RemovePassengerAsync(passengerId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetPassengerDictionaryAsync() {
            return base.Channel.GetPassengerDictionaryAsync();
        }
        
        public System.Threading.Tasks.Task<string> AddBoardingPassAsync(string flightId, string passengerId, string managerId, System.DateTime flightDateTime) {
            return base.Channel.AddBoardingPassAsync(flightId, passengerId, managerId, flightDateTime);
        }
        
        public System.Threading.Tasks.Task<string> AddLuggageAsync(string passengerId, float weight) {
            return base.Channel.AddLuggageAsync(passengerId, weight);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetFlightDictionaryAsync(string departure, string arrival) {
            return base.Channel.GetFlightDictionaryAsync(departure, arrival);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:54822/Service.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return ServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return ServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IService,
        }
    }
}
